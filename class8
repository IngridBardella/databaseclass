-- Limit the amout of rows returned
-- SELECT TOP 5 * FROM order_items WHERE quantity >= 2;

-- Select all order item with the most items ordered
SELECT MAX(quantity) FROM order_items;

SELECT * FROM order_items WHERE quantity = 3;

UPDATE order_items SET quantity = 3 WHERE product_id = 2;
-- Previous queries with hardcoded value incorrect

SELECT * FROM order_items WHERE quantity = (SELECT MAX(quantity) FROM order_items);

UPDATE order_items SET quantity = 4 WHERE product_id = 12;
-- previous subquery still works!


-- Write a query to select all customers whose order has not shipped
SELECT first_name, last_name, phone FROM customers
WHERE customer_id IN (SELECT customer_id FROM orders WHERE shipped_date IS NULL)
ORDER BY 1 ASC; -- order by the first(1) column


-- ANY (or) ALL (and)
SELECT order_id, required_date FROM orders
WHERE required_date > ALL (SELECT order_date FROM orders);


-- Write a query that returns all order_id and order_date that has at least one item that is priced over $150
SELECT order_id FROM order_items WHERE list_price > 150; -- inner query

SELECT order_id, order_date FROM orders 
WHERE order_id IN (SELECT order_id FROM order_items WHERE list_price > 150);

-- Write a query to select all the order_id and order_date who have 70 or more of one product in an order
SELECT order_id, quantity FROM order_items WHERE quantity >= 70;

SELECT order_id, order_date FROM orders
WHERE order_id IN (SELECT order_id FROM order_items WHERE quantity >= 70);

-- Write a query that returns all employees that are reported to
-- SELECT * FROM staffs WHERE staff_id = manager_id; -- i am my own boss!!! woohoo
SELECT * FROM staffs WHERE staff_id IN (SELECT manager_id FROM staffs);


-- aggregate functions
SELECT COUNT(store_id) FROM orders;

SELECT AVG(list_price) AS average_price, 
    MAX(list_price) AS max_price, 
    MIN(list_price) AS min_price,
    COUNT(list_price) AS total_rows,
    SUM(list_price) AS total_price
FROM order_items;

SELECT order_id, COUNT(*) AS total_items, SUM(quantity * list_price) AS total_price 
FROM order_items 
WHERE order_id > 15 -- we cannot use aggegate function in WHERE
GROUP BY order_id
HAVING SUM(quantity * list_price) > 1000 -- cannot use column alias total_price
ORDER BY total_price ASC;

SELECT product_id, COUNT(*) AS total_items, SUM(quantity) AS total_product 
FROM order_items 
GROUP BY product_id;

SELECT quantity, COUNT(*) AS total_qty 
FROM order_items 
WHERE COUNT(*) > 10
GROUP BY quantity;


SELECT * FROM order_items WHERE product_id = 261;

-- Find the total price for each order.​
-- You need only show the order_id and the orderTotal (you need to calculate the total price of the order)​
SELECT order_id, SUM(quantity * list_price) AS orderTotal
FROM order_items
GROUP BY order_id;

-- Find the product_id and total number of products that were ordered for orders that have been shipped​
SELECT product_id, SUM(quantity) AS totalProducts
FROM order_items
WHERE order_id IN (SELECT order_id FROM orders WHERE shipped_date IS NOT NULL)
GROUP BY product_id;

-- Find the total number of employees that work in each office that has 3 or more employees​
SELECT COUNT(staff_id) as totalEmployee, store_id
FROM staffs
GROUP BY store_id 
HAVING COUNT(staff_id) >= 3


-- Correlated Subquery - subquery executes for EVERY ROW
-- SELECT every product whose list price is less than the average price of every product within its category
-- compare the item list price to the average list price of its own category
SELECT  product_id, product_name, list_price, category_id
FROM products AS p1
WHERE list_price < (SELECT AVG(list_price) FROM products WHERE category_id = p1.category_id);

SELECT AVG(list_price), category_id FROM products GROUP BY category_id;

-- alias every column
SELECT  p1.product_id, p1.product_name, p1.list_price, p1.category_id
FROM products AS p1
WHERE p1.list_price < (SELECT AVG(p2.list_price) FROM products AS p2 WHERE p2.category_id = p1.category_id);

-- UNION
SELECT brand_id FROM brands;

SELECT DISTINCT model_year FROM products;

SELECT brand_id, brand_name FROM brands
UNION
SELECT model_year, product_name FROM products;

-- Find the first name, last name and email of all staff and customer
SELECT 'employee' as type, first_name, last_name, email FROM staffs
UNION
SELECT 'customer', first_name, last_name, email FROM customers WHERE customer_id < 10
